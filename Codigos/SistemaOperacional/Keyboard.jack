// Este arquivo é parte do www.nand2tetris.org
// e o livro "The Elements of Computing Systems"
// por Nisan e Schocken, MIT Press.
// Nome do arquivo: Keyboard.jack
// Traduzido por: Luciano Soares

/**
 * Biblioteca para manipular a entrada do usuário a partir do teclado.
 */
class Keyboard {

    /** Inicializa suporte para o teclado. */
    function void init() {
        return;
    } 

    /**
     * Retorna o caractere da tecla atualmente pressionada no teclado;
     * Se nenhuma tecla estiver pressionada, retorna 0.
     *
     * Reconhece todos os caracteres ASCII, bem como as seguintes teclas:
     * nova linha = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * tecla para esquerda = 130
     * tecla para cima = 131
     * tecla para direita = 132
     * tecla para baixo = 133
     * tecla home = 134
     * tecla end = 135
     * tecla page up = 136
     * tecla page down = 137
     * tecla insert = 138
     * tecla delete = 139
     * tecla ESC = 140
     * teclas F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return(Memory.peek(24576));
    }

    /**								
     * Espera até que uma tecla seja pressionada e solta no teclado,
     * exibindo a tecla na tela e retorna o caracter da tecla pressionada.
     */
    function char readChar() {
        var char key;
        var char c;
        var boolean prompt;
        var int count;
        let count = 0;
        let prompt = true;
        do Output.printChar("_");
        let key = Keyboard.keyPressed();
        while(key=0) {
            let key = Keyboard.keyPressed();
            if(count>10000) {
                if(prompt) {
                    do Output.backSpace();
                } else {
                    do Output.printChar(prompt);
                }
                let prompt = ~ prompt;
                let count = 0;
            }
            let count = count + 1;
        }
        if(prompt) {
            do Output.backSpace();
        }
        let c = key;
        do Output.printChar(c);
        while( ~(key=0) ) {
            let key = Keyboard.keyPressed();
        }
        return c;
    }

    /**								
     * Exibe a mensagem passada como argumento na tela, lê do teclado o texto digitado
     * até que um caractere de nova linha seja detectado, exibe o texto digitado na tela,
     * e retorna seu valor. Lida com os backspaces dos usuários.
     */
    function String readLine(String message) {
        var String str;
        var char c;
        let str = String.new(128);
        do Output.printString(message);
        while(true) {
            let c = Keyboard.readChar();
            if(c=String.newLine()) {
                return str;
            } else { 
                if(c=String.backSpace()) {
                    do str.eraseLastChar();
                } else {
                    do str.appendChar(c);
                }
            }
        }
        return str;
    }   

    /**								
     * Exibe a mensagem passada como argumento na tela, lê do teclado o texto digitado
     * até que um caractere de nova linha seja detectado, exibe o texto digitado na tela,
     * e retorna seu valor como número inteiro (até o primeiro caracter não numérico).
     * Também lida com os backspaces dos usuários.
     */
    function int readInt(String message) {
        var String str;
        let str = Keyboard.readLine(message);
        return str.intValue();
    }

}
