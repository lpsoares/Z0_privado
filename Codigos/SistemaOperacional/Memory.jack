// Este arquivo é parte do www.nand2tetris.org
// e o livro "The Elements of Computing Systems"
// por Nisan e Schocken, MIT Press.
// Nome do arquivo: Memory.jack
// Traduzido por: Luciano Soares

/**
 * Esta biblioteca oferece dois serviços: acesso direto a memória principal (RAM) do computador,
 * e alocação e reciclagem de blocos de memória. A RAM do computador
 * consiste em 32.768 palavras, cada uma representando um valor binário de 16 bits.
 */ 
class Memory {

    static Array ram;
    static Array free;

    /** Inicializa suporte para a biblioteca de memória. */
    function void init() {
        let ram = 0;
        let free = 2048;
        let free[0] = null;
        let free[1] = 14334;
        return;
    }

    /** Retorna o valor da RAM de um determinado endereço. */
    function int peek(int address) {
        return ram[address];
    }

    /** Define um valor para a memória RAM em um dado endereço. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Encontra a posição de um bloco de memória RAM disponível para o tamanho pedido
     *  e retorna a referencia para o endereço da base da memória. */
    function int alloc(int size) {
        var Array block;
        var Array blockn;
        var Array tmp;

        let block = free;

        if( block[1] > (size+2+2) ) {

            let blockn = block + size + 2;
            let blockn[0] = block[0];
            let blockn[1] = block[1] - size - 2; 

            let block[0] = null;
            let block[1] = size;

            let free = blockn;

            return block+2;

        } else {

            let tmp = block[0];
            while( ~(tmp=null) ) {

                if( tmp[1] > (size+2+2) ) {

                    let blockn = block + size + 2;
                    let blockn[0] = block[0];
                    let blockn[1] = block[1] - size - 2; 

                    let tmp[0] = null;
                    let tmp[1] = size;

                    let block[0] = blockn;

                    return tmp+2;

                }

                let block = tmp[0];
                let tmp = block[0];

            }

            return null;  // no space available

        }

    }

    /** Desaloca a memória de um objeto (ou vetor) tornando ele disponível
     *  para futuras alocações de memória. */
    function void deAlloc(Array o) {
        let o[0] = free;
        let free = o;
        return;
    }    
}
