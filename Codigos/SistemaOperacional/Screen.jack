// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0]=1;
        let twoToThe[1]=2;
        let twoToThe[2]=4;
        let twoToThe[3]=8;
        let twoToThe[4]=16;
        let twoToThe[5]=32;
        let twoToThe[6]=64;
        let twoToThe[7]=128;
        let twoToThe[8]=256;
        let twoToThe[9]=512;
        let twoToThe[10]=1024;
        let twoToThe[11]=2048;
        let twoToThe[12]=4096;
        let twoToThe[13]=8192;
        let twoToThe[14]=16384;
        let twoToThe[15]=(-32767)-1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int pos;
        let pos = 16384;   
        while(pos<24576) {     // 16384 + 8192 <= (256*32)
            do Memory.poke(pos,0);
            let pos = pos + 1;
        } 
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int alreadyThere;
        var int print;
        var int internal;
        var int pos;

        let pos = 16384 + (y*32) + (x/16);

        let internal = x - ((x/16)*16);

        let alreadyThere = Memory.peek(pos);
        if(color) {
            let print = alreadyThere | twoToThe[internal];
        } else {
            let print = alreadyThere & (~twoToThe[internal]);
        }
        
        do Memory.poke(pos,print);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int diff;
        var int dx;
        var int dy;

        let a=0;
        let b=0;
        let diff=0;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if( (dx>0) & (dy>0) ) {
            while( ( (a<dx) ) & ( (b<dy) ) ) {
                do Screen.drawPixel(x1+a, y1+b);
                if(diff<0){
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        if( (dx>0) & (dy<0) ) {
            while( ( (a<dx)  ) & ( (b>dy)  ) ) {
                do Screen.drawPixel(x1+a, y1+b);
                if( (diff>0) ) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
        }

        if( (dx<0) & (dy>0) ) {
            while( ( (a>dx)  ) & ( (b<dy)  ) ) {
                do Screen.drawPixel(x1+a, y1+b);
                if(diff>0){
                    let a = a - 1;
                    let diff = diff - dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        if( (dx<0) & (dy<0) ) {
            while( ( (a>dx) ) & ( (b>dy)  ) ) {
                do Screen.drawPixel(x1+a, y1+b);
                if(diff<0){
                    let a = a - 1;
                    let diff = diff - dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
        }

        if(dx=0) {
            while( Math.abs(a)<Math.abs(dy) ) {
                do Screen.drawPixel(x1, y1+a);
                if(dy>0){
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
            }
        }

        if(dy=0) {
            while( Math.abs(a)<Math.abs(dx) ) {
                do Screen.drawPixel(x1+a, y1);
                if(dx>0){
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int countLine;
        var int maxX;
        var int minX;

        let maxX = Math.max(x1,x2);
        let minX = Math.min(x1,x2);

        let countLine = 0;
        while(countLine < (maxX-minX) ) {
            do Screen.drawLine(minX+countLine,y1,minX+countLine,y2);
            let countLine = countLine + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int tmp;

        let dy = -r;
        while(dy < r) {
            let tmp = Math.sqrt( (r*r) - (dy*dy) );
            do Screen.drawLine(x-tmp,y+dy,x+tmp,y+dy);
            let dy = dy + 1;
        }
        return;
    }

}
