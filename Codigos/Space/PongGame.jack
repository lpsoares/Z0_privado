
class PongGame {

    static PongGame instance; // the singelton, a Pong game instance     
    field Ship ship;            // the bat
    field Shot shot;          // the ball
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.

    field Array shots;
    field int countShot;

    field Array asteroids;
    field int countAsteroid;    
    field int countRelease;
    
    /** Constructs a new Pong game. */
    constructor PongGame new() {

	    //do Screen.clearScreen();
        var int c;
        
        let ship = Ship.new(256, 128);

        let countShot = 0;
        let shots = Array.new(100);

        let c = 0;
        while(c<100) {
            let shots[c] = null;
            let c = c + 1;
        }
        
        let countAsteroid = 0;
        let asteroids = Array.new(100);

        let c = 0;
        while(c<10) {
            let asteroids[c] = null;
            let c = c + 1;
        }

        let countRelease = 0;
        
        do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");
	
	    let exit = false;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do ship.dispose();
	    do shot.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    method void release() {
        var Asteroid asteroid;

        if(countRelease=0) {
            let asteroid = Asteroid.new(100,128,1,0,10);
            let asteroids[countAsteroid] = asteroid;
            let countAsteroid = countAsteroid + 1;
            let countRelease = 1;
        } else {
            let countRelease = countRelease + 1;
            if(countRelease>100) {
                let countRelease = 0;
            }
        }
        
        return;

    }


    /** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;
        var Shot shot;
        
        while (~exit) {

            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do moveShot();
                do ship.move();
                do moveAstereoid();
                do release();
                do Sys.wait(50);
            }

            if (key = 130) { // left
                do ship.rotCounterClock();
            }
	        
            if (key = 132) { // right
                do ship.rotClock(); 
            }
            
            if (key = 131) { // up
                let shot = Shot.new(256, 128, 1, 510, 1, 254); 
                do shot.setDestination(ship.getShotX(),ship.getShotY());
                let shots[countShot] = shot;
                let countShot = countShot + 1;
                if(countShot=0) {
                    let countShot = 0;
                }
            }
            
            if (key = 140) { 
                let exit = true; 
            }
	        

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do moveShot();
                do ship.move();
                do moveAstereoid();
                do release();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void moveShot() {

        var Shot shot;
        var Asteroid asteroid;
        var int c;
        var int c2;

        var int bouncingDirection, batLeft, batRight, ballLeft, ballRight;

        let c = 0;
        while(c<100) {
            let shot = shots[c];
            if( ~(shot=null) ){
                let wall = shot.move();
                if (wall > 0) {
                    do shot.hide();
                    do shot.dispose();
                    let shots[c] = null;
                }
                let c2 = 0;
                while(c2<10) {
                    let asteroid = asteroids[c2];
                    if( ~(asteroid=null) ){
                        if ( asteroid.hit( shot.getX(),shot.getY() ) ) {
                            do asteroid.hide();
                            do asteroid.dispose();
                            let asteroids[c2] = null;
                        }
                    }     
                    let c2 = c2 + 1;   
                }

            }     
            let c = c + 1;   
        }

        return;
    }

    method void moveAstereoid() {

        var Asteroid asteroid;
        var int c;

        let c = 0;
        while(c<100) {
            let asteroid = asteroids[c];
            if( ~(asteroid=null) ){
                do asteroid.move();
            }     
            let c = c + 1;   
        }

        return;

    }

}